{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class SudokuGeneratorService {\n  constructor() {\n    this.grid = Array.from({\n      length: 9\n    }, () => Array(9).fill(0));\n  }\n  isSafe(row, col, num) {\n    for (let i = 0; i < 9; i++) {\n      if (this.grid[row][i] === num || this.grid[i][col] === num) return false;\n    }\n    const startRow = Math.floor(row / 3) * 3;\n    const startCol = Math.floor(col / 3) * 3;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (this.grid[startRow + i][startCol + j] === num) return false;\n      }\n    }\n    return true;\n  }\n  solve(row = 0, col = 0) {\n    if (row === 9) return true;\n    if (col === 9) return this.solve(row + 1, 0);\n    if (this.grid[row][col] !== 0) return this.solve(row, col + 1);\n    let numbers = Array.from({\n      length: 9\n    }, (_, i) => i + 1).sort(() => Math.random() - 0.5);\n    for (let num of numbers) {\n      if (this.isSafe(row, col, num)) {\n        this.grid[row][col] = num;\n        if (this.solve(row, col + 1)) return true;\n        this.grid[row][col] = 0;\n      }\n    }\n    return false;\n  }\n  printSudoku(grid) {\n    grid.forEach(row => console.log(row.join('')));\n    console.log(grid);\n    return grid;\n  }\n  generateSudoku() {\n    this.grid = Array.from({\n      length: 9\n    }, () => Array(9).fill(0));\n    this.solve();\n    return this.printSudoku(this.grid);\n  }\n  static {\n    this.ɵfac = function SudokuGeneratorService_Factory(t) {\n      return new (t || SudokuGeneratorService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SudokuGeneratorService,\n      factory: SudokuGeneratorService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["SudokuGeneratorService","constructor","Array","from","length","fill","isSafe","row","col","num","i","grid","startRow","Math","floor","startCol","j","solve","numbers","_","sort","random","printSudoku","forEach","console","log","join","generateSudoku","factory","providedIn"],"sourceRoot":"","sources":["D:\\Angular\\Suduku_project\\Frontend\\app\\src\\app\\service\\sudoku-generator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SudokuGeneratorService {\n  private grid: number[][] = Array.from({ length: 9 }, () => Array(9).fill(0));\n\n  constructor() {}\n  isSafe(row: number, col: number, num: number): boolean {\n    for (let i = 0; i < 9; i++) {\n      if (this.grid[row][i] === num || this.grid[i][col] === num) return false;\n    }\n\n    const startRow = Math.floor(row / 3) * 3;\n    const startCol = Math.floor(col / 3) * 3;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (this.grid[startRow + i][startCol + j] === num) return false;\n      }\n    }\n    return true;\n  }\n  solve(row = 0, col = 0): boolean {\n    if (row === 9) return true;\n    if (col === 9) return this.solve(row + 1, 0);\n    if (this.grid[row][col] !== 0) return this.solve(row, col + 1);\n\n    let numbers = Array.from({ length: 9 }, (_, i) => i + 1).sort(\n      () => Math.random() - 0.5\n    );\n\n    for (let num of numbers) {\n      if (this.isSafe(row, col, num)) {\n        this.grid[row][col] = num;\n        if (this.solve(row, col + 1)) return true;\n        this.grid[row][col] = 0;\n      }\n    }\n    return false;\n  }\n  printSudoku(grid: number[][]) {\n    grid.forEach((row) => console.log(row.join('')));\n    console.log(grid);\n    return grid;\n  }\n  generateSudoku() {\n    this.grid = Array.from({ length: 9 }, () => Array(9).fill(0));\n    this.solve();\n\n    return this.printSudoku(this.grid);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}