{"ast":null,"code":"import { finalize, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./loader-service.service\";\nexport class LoaderInterceptor {\n  constructor(loaderService) {\n    this.loaderService = loaderService;\n  }\n  intercept(req, next) {\n    this.loaderService.show();\n    return next.handle(req).pipe(catchError(error => {\n      return throwError(() => error);\n    }), finalize(() => {\n      this.loaderService.hide();\n    }));\n  }\n  static {\n    this.ɵfac = function LoaderInterceptor_Factory(t) {\n      return new (t || LoaderInterceptor)(i0.ɵɵinject(i1.LoaderServiceService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoaderInterceptor,\n      factory: LoaderInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"mappings":"AASA,SAASA,QAAQ,EAAEC,UAAU,QAAQ,gBAAgB;;;AAIrD,OAAM,MAAOC,iBAAiB;EAC5BC,YAAoBC,aAAmC;IAAnC,kBAAa,GAAbA,aAAa;EAAyB;EAE1DC,SAAS,CACPC,GAAqB,EACrBC,IAAiB;IAEjB,IAAI,CAACH,aAAa,CAACI,IAAI,EAAE;IACzB,OAAOD,IAAI,CAACE,MAAM,CAACH,GAAG,CAAC,CAACI,IAAI,CAC1BT,UAAU,CAAEU,KAAwB,IAAI;MACtC,OAAOC,UAAU,CAAC,MAAMD,KAAK,CAAC;IAChC,CAAC,CAAC,EACFX,QAAQ,CAAC,MAAK;MACZ,IAAI,CAACI,aAAa,CAACS,IAAI,EAAE;IAC3B,CAAC,CAAC,CACH;EACH;;;uBAhBWX,iBAAiB;IAAA;EAAA;;;aAAjBA,iBAAiB;MAAAY,SAAjBZ,iBAAiB;IAAA;EAAA","names":["finalize","catchError","LoaderInterceptor","constructor","loaderService","intercept","req","next","show","handle","pipe","error","throwError","hide","factory"],"sourceRoot":"","sources":["D:\\Angular\\Suduku_project\\Frontend\\app\\src\\app\\service\\loader.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize, catchError } from 'rxjs/operators';\nimport { LoaderServiceService } from './loader-service.service';\n\n@Injectable()\nexport class LoaderInterceptor implements HttpInterceptor {\n  constructor(private loaderService: LoaderServiceService) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    this.loaderService.show();\n    return next.handle(req).pipe(\n      catchError((error: HttpErrorResponse) => {\n        return throwError(() => error);\n      }),\n      finalize(() => {\n        this.loaderService.hide();\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}