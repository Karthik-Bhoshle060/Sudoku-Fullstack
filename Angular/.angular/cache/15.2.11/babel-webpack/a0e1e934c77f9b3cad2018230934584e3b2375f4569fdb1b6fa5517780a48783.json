{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class LoaderInterceptor {\n  constructor() {}\n  intercept(request, next) {\n    return next.handle(request);\n  }\n  static {\n    this.ɵfac = function LoaderInterceptor_Factory(t) {\n      return new (t || LoaderInterceptor)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoaderInterceptor,\n      factory: LoaderInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"mappings":";AAUA,OAAM,MAAOA,iBAAiB;EAE5BC,eAAe;EAEfC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC;EAC7B;;;uBANWH,iBAAiB;IAAA;EAAA;;;aAAjBA,iBAAiB;MAAAM,SAAjBN,iBAAiB;IAAA;EAAA","names":["LoaderInterceptor","constructor","intercept","request","next","handle","factory"],"sourceRoot":"","sources":["D:\\Angular\\Suduku_project\\Frontend\\app\\src\\app\\service\\loader.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class LoaderInterceptor implements HttpInterceptor {\n\n  constructor() {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}