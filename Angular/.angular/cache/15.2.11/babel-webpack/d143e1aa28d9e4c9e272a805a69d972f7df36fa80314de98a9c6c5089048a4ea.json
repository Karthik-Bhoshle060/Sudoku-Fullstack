{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nlet SudokuGridComponent = class SudokuGridComponent {\n  constructor(sudokuGeneratorService) {\n    this.sudokuGeneratorService = sudokuGeneratorService;\n    //grid: any[][];\n    this.grid = [];\n    this.VerifyPuzzle = new EventEmitter();\n    this.answergrid = [];\n    this.selectedValue = null;\n    // this.grid = this.sudokuGeneratorService.generateSudoku();\n  }\n\n  ngOnInit() {\n    this.answergrid = this.sudokuGeneratorService.generatePuzzleWith25Clues(this.grid);\n  }\n  validateInput(event, row, col) {\n    const input = event.target;\n    const value = input.value;\n    if (!/^[1-9]$/.test(value)) {\n      input.value = '';\n      this.answergrid[row][col] = '';\n    } else {\n      this.answergrid[row][col] = value;\n    }\n  }\n  comparetheGrid() {\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (this.answergrid[i][j] != this.grid[i][j]) return false;\n      }\n    }\n    return true;\n  }\n  Validate() {\n    this.VerifyPuzzle.emit(this.comparetheGrid());\n  }\n  SelectedValue(value) {\n    if (value != '') {\n      this.selectedValue = value;\n    } else {\n      this.selectedValue = null;\n    }\n  }\n  checkType(value) {\n    return typeof value == 'number';\n  }\n};\n__decorate([Input()], SudokuGridComponent.prototype, \"grid\", void 0);\n__decorate([Output()], SudokuGridComponent.prototype, \"VerifyPuzzle\", void 0);\nSudokuGridComponent = __decorate([Component({\n  selector: 'app-sudoku-grid',\n  templateUrl: './sudoku-grid.component.html',\n  styleUrls: ['./sudoku-grid.component.scss']\n})], SudokuGridComponent);\nexport { SudokuGridComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,YAAY,EAAEC,KAAK,EAAUC,MAAM,QAAQ,eAAe;AAQvE,IAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAM9BC,YAAoBC,sBAA8C;IAA9C,2BAAsB,GAAtBA,sBAAsB;IAL1C;IACS,SAAI,GAAY,EAAE;IACjB,iBAAY,GAAG,IAAIL,YAAY,EAAO;IAChD,eAAU,GAAU,EAAE;IACtB,kBAAa,GAAQ,IAAI;IAEvB;EACF;;EACAM,QAAQ;IACN,IAAI,CAACC,UAAU,GAAG,IAAI,CAACF,sBAAsB,CAACG,yBAAyB,CACrE,IAAI,CAACC,IAAI,CACV;EACH;EAEAC,aAAa,CAACC,KAAY,EAAEC,GAAW,EAAEC,GAAW;IAClD,MAAMC,KAAK,GAAGH,KAAK,CAACI,MAA0B;IAC9C,MAAMC,KAAK,GAAGF,KAAK,CAACE,KAAK;IAEzB,IAAI,CAAC,SAAS,CAACC,IAAI,CAACD,KAAK,CAAC,EAAE;MAC1BF,KAAK,CAACE,KAAK,GAAG,EAAE;MAChB,IAAI,CAACT,UAAU,CAACK,GAAG,CAAC,CAACC,GAAG,CAAC,GAAG,EAAE;KAC/B,MAAM;MACL,IAAI,CAACN,UAAU,CAACK,GAAG,CAAC,CAACC,GAAG,CAAC,GAAGG,KAAK;;EAErC;EACAE,cAAc;IACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1B,IAAI,IAAI,CAACb,UAAU,CAACY,CAAC,CAAC,CAACC,CAAC,CAAC,IAAI,IAAI,CAACX,IAAI,CAACU,CAAC,CAAC,CAACC,CAAC,CAAC,EAAE,OAAO,KAAK;;;IAG9D,OAAO,IAAI;EACb;EACAC,QAAQ;IACN,IAAI,CAACC,YAAY,CAACC,IAAI,CAAC,IAAI,CAACL,cAAc,EAAE,CAAC;EAC/C;EACAM,aAAa,CAACR,KAAU;IACtB,IAAIA,KAAK,IAAI,EAAE,EAAE;MACf,IAAI,CAACS,aAAa,GAAGT,KAAK;KAC3B,MAAM;MACL,IAAI,CAACS,aAAa,GAAG,IAAI;;EAE7B;EACAC,SAAS,CAACV,KAAU;IAClB,OAAO,OAAOA,KAAK,IAAI,QAAQ;EACjC;CACD;AA7CUW,YAAR1B,KAAK,EAAE,iDAAoB;AAClB0B,YAATzB,MAAM,EAAE,yDAAwC;AAHtCC,mBAAmB,eAL/BJ,SAAS,CAAC;EACT6B,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,GACW3B,mBAAmB,CA+C/B;SA/CYA,mBAAmB","names":["Component","EventEmitter","Input","Output","SudokuGridComponent","constructor","sudokuGeneratorService","ngOnInit","answergrid","generatePuzzleWith25Clues","grid","validateInput","event","row","col","input","target","value","test","comparetheGrid","i","j","Validate","VerifyPuzzle","emit","SelectedValue","selectedValue","checkType","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Angular\\Suduku_project\\Frontend\\app\\src\\app\\components\\sudoku-grid\\sudoku-grid.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { SudokuGeneratorService } from 'src/app/service/sudoku-generator.service';\n\n@Component({\n  selector: 'app-sudoku-grid',\n  templateUrl: './sudoku-grid.component.html',\n  styleUrls: ['./sudoku-grid.component.scss'],\n})\nexport class SudokuGridComponent implements OnInit {\n  //grid: any[][];\n  @Input() grid: any[][] = [];\n  @Output() VerifyPuzzle = new EventEmitter<any>();\n  answergrid: any[] = [];\n  selectedValue: any = null;\n  constructor(private sudokuGeneratorService: SudokuGeneratorService) {\n    // this.grid = this.sudokuGeneratorService.generateSudoku();\n  }\n  ngOnInit() {\n    this.answergrid = this.sudokuGeneratorService.generatePuzzleWith25Clues(\n      this.grid\n    );\n  }\n\n  validateInput(event: Event, row: number, col: number) {\n    const input = event.target as HTMLInputElement;\n    const value = input.value;\n\n    if (!/^[1-9]$/.test(value)) {\n      input.value = '';\n      this.answergrid[row][col] = '';\n    } else {\n      this.answergrid[row][col] = value;\n    }\n  }\n  comparetheGrid() {\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (this.answergrid[i][j] != this.grid[i][j]) return false;\n      }\n    }\n    return true;\n  }\n  Validate() {\n    this.VerifyPuzzle.emit(this.comparetheGrid());\n  }\n  SelectedValue(value: any) {\n    if (value != '') {\n      this.selectedValue = value;\n    } else {\n      this.selectedValue = null;\n    }\n  }\n  checkType(value: any) {\n    return typeof value == 'number';\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}